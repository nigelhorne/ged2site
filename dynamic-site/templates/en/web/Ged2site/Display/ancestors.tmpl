<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title>Ancestor Tree</title>
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/treant-js/1.0/Treant.css">
		<link rel="stylesheet" href="https://fperucic.github.io/treant-js/Treant-js.css">
		<!-- Tippy.js CSS -->
		<link rel="stylesheet" href="https://unpkg.com/tippy.js@6/dist/tippy.css" />

		<!-- Popper.js (dependency for Tippy.js) -->
		<script src="https://unpkg.com/@popperjs/core@2"></script>

		<!-- Tippy.js -->
		<script src="https://unpkg.com/tippy.js@6"></script>

		<style>
			.blackNode, .grayNode {
				border: 2px solid #444;
				border-radius: 8px;
				color: white;
				box-shadow: 0 0 5px rgba(0, 0, 0, 0.4);
				width: 160px;	/* set fixed width */
				box-sizing: border-box;
				text-align: center;
			}

			.blackNode {
				background-color: #000;
			}

			.grayNode {
				background-color: #666;
			}

			.blackNode .node-name,
			.grayNode .node-name,
			.blackNode .node-title,
			.grayNode .node-title {
				color: white;
			}

			.node-name {
				font-weight: bold;
				font-size: 16px;
				padding: 10px;
			}

			.node-title {
				font-size: 12px;
				padding: 10px;
			}

			.node-img {
				width: 60px;
				height: 60px;
				object-fit: cover;
				border-radius: 50%;
				margin-bottom: 5px;
			}

			.tippy-box[data-theme~='lightgray'] {
				background-color: #d3d3d3;	/* light gray */
				color: black;	/* text color for contrast */
				border-radius: 4px;
				box-shadow: 0 0 5px rgba(0,0,0,0.2);
			}

		</style>
	</head>
	<body>
		<h1>Ancestor Tree</h1>
		<div id="tree-container" class="tree"></div>

		<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.3.0/raphael.min.js"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/treant-js/1.0/Treant.min.js"></script>

		<div style="margin-bottom: 20px;">
			<strong>Legend:</strong>
			<div style="display: flex; gap: 10px; align-items: center; margin-top: 5px;">
				<div style="background-color: #000; width: 20px; height: 20px; border: 1px solid #444;"></div>
				<span>Deceased</span>
				<div style="background-color: #666; width: 20px; height: 20px; border: 1px solid #444;"></div>
				<span>Living</span>
			</div>
		</div>

		<script>
			const ancestors = [% ancestors %];
			const homePersonXref = ancestors.xref;
			const treeData = convertToTreant(ancestors);

    new Treant({
      chart: {
        container: "#tree-container",
        rootOrientation: "NORTH", // top-down
        nodeAlign: "BOTTOM",
        connectors: {
          type: "step"
        },
        node: {
          HTMLclass: "nodeExample1"
        },
        animation: {
          nodeAnimation: "easeOutBounce",
          nodeSpeed: 700,
          connectorsAnimation: "bounce",
          connectorsSpeed: 700
        }
      },
      nodeStructure: treeData
    });

    function formatLifespan(person) {
      let parts = [];
      if (person.birth) parts.push("b. " + person.birth);
      if (person.death) parts.push("d. " + person.death);
      return parts.join(" - ");
    }

    function convertToTreant(person) {
      const nodeClass = person.death ? "blackNode" : "grayNode";
      // const fullTitle = `${person.name} (b. ${person.birth || "?"}${person.death ? " â€“ d. " + person.death : ""})`;
      const fullTitle = person.bio;

	// Construct the content HTML
	let contentHTML = '';
	if (person.img) {
		contentHTML += "<img src=/" + person.img + ` alt=\"` + person.name + `" class="node-img"><br>`;
	}

	contentHTML += `<div class="node-name">` + person.name + `</div>`;
	contentHTML += `<div class="node-title">` + formatLifespan(person) + `</div>`;

      const node = {
	innerHTML: contentHTML,
        // text: {
          // name: person.name,
          // title: formatLifespan(person)
        // },
        HTMLclass: nodeClass,
        HTMLid: "person-" + person.id, // for Tooltips
        link: {
          href: "/cgi-bin/page.fcgi?page=people&entry=" + person.id
        },
        children: [],
        extra: {
          tooltip: fullTitle // Tooltip field to be used
        }
      };

      if (person.parents && person.parents.length > 0) {
        node.children = person.parents.map(convertToTreant);
      }

      return node;
    }

function decodeHtmlEntities(text) {
  const txt = document.createElement('textarea');
  txt.innerHTML = text;
  return txt.value;
}
			// Function to recursively traverse the tree and set the tooltip
			function setTooltips(node) {
				const element = document.getElementById(node.HTMLid);
				if (element && node.extra && node.extra.tooltip) {
					tippy(element, {
						content: node.extra.tooltip,  // HTML tooltip content
						allowHTML: true,
						interactive: true,
						delay: [300, 0],
						placement: 'top',
						theme: 'lightgray'
					});
				}

				if (node.children) {
					node.children.forEach(setTooltips);
				}
			}

			// Apply the tooltip after the tree is rendered
			document.addEventListener("DOMContentLoaded", () => {
				setTimeout(() => {
					// Start with the root node and recursively set tooltips
					setTooltips(treeData);
					scrollToMainPerson(homePersonXref);	// Centre on the home person
				}, 500); // Wait for the nodes to be rendered
			});

			function scrollToMainPerson(mainPersonId) {
				const el = document.getElementById("person" + mainPersonId);
				if (el) {
					el.scrollIntoView({ behavior: 'smooth', block: 'center' });
				}
			}

		</script>
	</body>
</html>
